4-queen problem
    Variables
        X1, X2, X3, X4 -> Rows
    Domains
        1, 2, 3, 4 -> Columns
    Constraints
        there are C(4, 2) = 6 Constraints
            between x[1] and x[1] is useless
            between x[1] and x[2] is same as x[2] and x[1]
        ie: R[1,2] = {(1,3), (1,4), (2,4), (3,1), (4,1), (4,2)}

Standard search formulation
    initial state
        empty assignment
    successor function
        assign a value to an unassigned variable
            that doesnt conflict with current assignment
        fail if not legal assignments
    goal test
        current assignment is complete
    properties
        same for all CSPs
        every solution appears at depth n with n Variables
            use dfs
        path is irrelevant, so can also use complete-state function
        b = (n-l)*d at depth l, hence n!*d^n leaves (b is branching factor)

backtracking search
    variable assignment are commutative
        [x = 1 then y = 2] is same as [y = 2 then x = 1]
    only need to consider assignments to a single variable at each node
        b = d and there are d^n leaves
    essentially dfs for CSPs with single-variable assignments
    size = b^n => d^n
        much better than (nd)^n
    caveat
        must select an ordering of variables to be selected

improving backtracking efficiency
    which variable should be assigned next?
    in what order should its values be tried?
    can we detect inevitable failure early?
    can we take advantage of problem structure?

minimum remaining values
    choose variable with fewest legal values

least constraining value
    given a variable, choose least constraining value
        the one that rules out the fewest values in the remaining variables

forward checking
    keep track of remaining legal values for unassigned variables
    terminate search when any variable has no legal values
    can we detect failures early?

consistency enforcement
    arc-consistency
        transform the network into smaller network
        only works over binary
        O(n^2)
        simplest form of propogation makes each arc consistent

arc consistency
    check if future values are allowed
        check for consistency
        repeat until no change
    go back and check if values can be used still
