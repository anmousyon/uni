Starting on 9-24 at 23:22:34

Question q1
===========

*** PASS: test_cases/q1/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'D', 'C']
*** PASS: test_cases/q1/graph_bfs_vs_dfs.test
*** 	solution:		['2:A->D', '0:D->G']
*** 	expanded_states:	['A', 'D']
*** PASS: test_cases/q1/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q1/graph_manypaths.test
*** 	solution:		['2:A->B2', '0:B2->C', '0:C->D', '2:D->E2', '0:E2->F', '0:F->G']
*** 	expanded_states:	['A', 'B2', 'C', 'D', 'E2', 'F']
*** PASS: test_cases/q1/pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 130
*** 	nodes expanded:		146

### Question q1: 3/3 ###


Question q2
===========

*** FAIL: test_cases/q2/graph_backtrack.test
*** 	graph:
*** 	     B   
*** 	     ^
*** 	     |
*** 	    *A --> C --> G
*** 	     |
*** 	     V
*** 	     D
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This tests whether
*** 	    you extract the sequence of actions correctly even
*** 	    if your search backtracks.  If you fail this, your
*** 	    nodes are not correctly tracking the sequences of
*** 	    actions required to reach them.
*** 	student solution:		['1:A->C', '0:C->G']
*** 	student expanded_states:	['A', 'B', 'C']
*** 
*** 	correct solution:		['1:A->C', '0:C->G']
*** 	correct expanded_states:	['A', 'B', 'C', 'D']
*** 	correct rev_solution:		['1:A->C', '0:C->G']
*** 	correct rev_expanded_states:	['A', 'D', 'C', 'B']
*** FAIL: test_cases/q2/graph_bfs_vs_dfs.test
*** 	graph:
*** 	    /-- B
*** 	    |   ^
*** 	    |   |
*** 	    |  *A -->[G]
*** 	    |   |     ^
*** 	    |   V     |
*** 	    \-->D ----/
*** 	    
*** 	    A is the start state, G is the goal.  Arrows
*** 	    mark possible transitions
*** 	student solution:		['1:A->G']
*** 	student expanded_states:	['A']
*** 
*** 	correct solution:		['1:A->G']
*** 	correct expanded_states:	['A', 'B']
*** 	correct rev_solution:		['1:A->G']
*** 	correct rev_expanded_states:	['A', 'D']
*** FAIL: test_cases/q2/graph_infinite.test
*** 	graph:
*** 	     B <--> C
*** 	     ^     /|
*** 	     |    / |
*** 	     V   /  V
*** 	    *A<-/  [G]
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.
*** 	student solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	student expanded_states:	['A', 'B', 'A', 'C']
*** 
*** 	correct solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	correct expanded_states:	['A', 'B', 'C']
*** 	correct rev_solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	correct rev_expanded_states:	['A', 'B', 'C']
*** FAIL: test_cases/q2/graph_manypaths.test
*** 	graph:
*** 	        B1          E1
*** 	       ^  \        ^  \
*** 	      /    V      /    V
*** 	    *A --> C --> D --> F --> [G]
*** 	      \    ^      \    ^
*** 	       V  /        V  /
*** 	        B2          E2
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This graph has multiple
*** 	    paths to the goal, where nodes with the same state 
*** 	    are added to the fringe multiple times before they
*** 	    are expanded.
*** 	student solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	student expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F']
*** 
*** 	correct solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** 	correct rev_solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct rev_expanded_states:	['A', 'B2', 'C', 'B1', 'D', 'E2', 'F', 'E1']
*** FAIL: test_cases/q2/pacman_1.test
*** Too many node expanded; are you expanding nodes twice?
*** 	student nodes expanded: 583
*** 
*** 	correct nodes expanded: 269 (leewayFactor 1.0)
*** Tests failed.

### Question q2: 0/3 ###


Question q3
===========

*** PASS: test_cases/q3/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q3/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases/q3/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q3/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases/q3/ucs_0_graph.test
*** 	solution:		['Right', 'Down', 'Down']
*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
*** PASS: test_cases/q3/ucs_1_problemC.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269
*** PASS: test_cases/q3/ucs_2_problemE.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 74
*** 	nodes expanded:		260
*** PASS: test_cases/q3/ucs_3_problemW.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 152
*** 	nodes expanded:		173
*** FAIL: Exception raised: 'int' object has no attribute 'count'
*** 
*** Traceback (most recent call last):
***   File "/Users/me/Repos/uni/CS4365/search/grading.py", line 78, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),1800)(self) # Call the question's function
***   File "/Users/me/Repos/uni/CS4365/search/util.py", line 633, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 300, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/Users/me/Repos/uni/CS4365/search/testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 295, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 305, in execute
***     solution, expanded, error = self.getSolInfo(search, searchAgents)
***   File "searchTestClasses.py", line 286, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 259, in uniformCostSearch
***     came_from, start, goal = ucs(problem, start)
***   File "search.py", line 222, in ucs
***     if problem.isGoalState(current[0]):
***   File "searchAgents.py", line 415, in isGoalState
***     return state[1].count() == 0
*** AttributeError: 'int' object has no attribute 'count'
*** 

### Question q3: 0/3 ###


Question q4
===========

*** FAIL: test_cases/q4/astar_0.test
*** 	graph:
*** 	              C
*** 	              ^
*** 	              | 2
*** 	         2    V   4 
*** 	    *A <----> B -----> [H]
*** 	              | 
*** 	         1.5  V  2.5
*** 	     G <----- D -----> E
*** 	              |
*** 	            2 | 
*** 	              V
*** 	             [F]
*** 	    
*** 	    A is the start state, F and H is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	student solution:		['Right', 'Down', 'Down']
*** 	student expanded_states:	['A', 'A', 'B', 'D', 'C', 'G']
*** 
*** 	correct solution:		['Right', 'Down', 'Down']
*** 	correct expanded_states:	['A', 'B', 'D', 'C', 'G']
*** 	correct rev_solution:		['Right', 'Down', 'Down']
*** 	correct rev_expanded_states:	['A', 'B', 'D', 'C', 'G']
*** FAIL: test_cases/q4/astar_1_graph_heuristic.test
*** 	graph:
*** 	         2     3     2
*** 	      S --- A --- C ---> G
*** 	      | \       /       ^
*** 	    3 |  \ 5   / 1     / 
*** 	      |   \   /       / 
*** 	      B --- D -------/
*** 	         4         5  
*** 	    
*** 	    S is the start state, G is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	    
*** 	    The heuristic value of each state is:
*** 	    	S 6.0
*** 	    	A 2.5
*** 	    	B 5.25
*** 	    	C 1.125
*** 	    	D 1.0625
*** 	    	G 0
*** 	student solution:		['2', '2']
*** 	student expanded_states:	['S', 'S', 'A', 'D', 'C', 'B']
*** 
*** 	correct solution:		['0', '0', '2']
*** 	correct expanded_states:	['S', 'A', 'D', 'C']
*** 	correct rev_solution:		['0', '0', '2']
*** 	correct rev_expanded_states:	['S', 'A', 'D', 'C']
*** PASS: test_cases/q4/astar_2_manhattan.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		223
*** FAIL: test_cases/q4/astar_3_goalAtDequeue.test
*** 	graph:
*** 	        1      1      1
*** 	    *A ---> B ---> C ---> [G]
*** 	     |                     ^
*** 	     |         10          |
*** 	     \---------------------/
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	    
*** 	    If you fail this test case, you may be incorrectly testing if a node is a goal 
*** 	    before adding it into the queue, instead of testing when you remove the node 
*** 	    from the queue.  See the algorithm pseudocode in lecture.
*** 	student solution:		['0:A->G']
*** 	student expanded_states:	['A', 'A', 'B', 'C']
*** 
*** 	correct solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	correct expanded_states:	['A', 'B', 'C']
*** 	correct rev_solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	correct rev_expanded_states:	['A', 'B', 'C']
*** FAIL: test_cases/q4/graph_backtrack.test
*** 	graph:
*** 	     B   
*** 	     ^
*** 	     |
*** 	    *A --> C --> G
*** 	     |
*** 	     V
*** 	     D
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This tests whether
*** 	    you extract the sequence of actions correctly even
*** 	    if your search backtracks.  If you fail this, your
*** 	    nodes are not correctly tracking the sequences of
*** 	    actions required to reach them.
*** 	student solution:		['1:A->C', '0:C->G']
*** 	student expanded_states:	['A', 'A', 'B', 'C', 'D']
*** 
*** 	correct solution:		['1:A->C', '0:C->G']
*** 	correct expanded_states:	['A', 'B', 'C', 'D']
*** 	correct rev_solution:		['1:A->C', '0:C->G']
*** 	correct rev_expanded_states:	['A', 'B', 'C', 'D']
*** FAIL: test_cases/q4/graph_manypaths.test
*** 	graph:
*** 	        B1          E1
*** 	       ^  \        ^  \
*** 	      /    V      /    V
*** 	    *A --> C --> D --> F --> [G]
*** 	      \    ^      \    ^
*** 	       V  /        V  /
*** 	        B2          E2
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This graph has multiple
*** 	    paths to the goal, where nodes with the same state 
*** 	    are added to the fringe multiple times before they
*** 	    are expanded.
*** 	student solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	student expanded_states:	['A', 'A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** 
*** 	correct solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** 	correct rev_solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct rev_expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** Tests failed.

### Question q4: 0/3 ###


Question q5
===========

*** NOTE: Make sure to complete Question q2 before working on Question q5,
*** because Question q5 builds upon your answer for Question q2.


Question q6
===========

*** NOTE: Make sure to complete Question q4 before working on Question q6,
*** because Question q6 builds upon your answer for Question q4.


Question q7
===========

*** NOTE: Make sure to complete Question q4 before working on Question q7,
*** because Question q7 builds upon your answer for Question q4.


Question q8
===========

[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
*** Method not implemented: findPathToClosestDot at line 512 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q8: 0/3 ###


Finished at 23:22:34

Provisional grades
==================
Question q1: 3/3
Question q2: 0/3
Question q3: 0/3
Question q4: 0/3
Question q5: 0/3
Question q6: 0/3
Question q7: 0/4
Question q8: 0/3
------------------
Total: 3/25

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

