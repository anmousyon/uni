decoder
    converts symbols from one code to another
    2->4

large decoder from small ones
    ex. 6->64 from three 2->4
            each 2-> decodes 2 bits
                a[1:0]->x[3:0], a[3:2]->7[3:0], a[5:4]->x[3:0]
            AND one bit from each of x,y,z to gen output
                b[i] = x[i[1:0]] & y[i[3:2]] & z[i[5:4]]

6->64 standalone or made of smaller?
    6->64
        64 6 input AND gates (384 inputs)
    6-64 using 2->4
        12 2 input AND gates (24 inputs)
        64 3 input AND gates (192 inputs)
        total of 216 inputs
    by using smaller ones and combining them they are faster, smaller, lower power

#verilog of decoder#

// a - binary input (n bits wide)
// b - one hot output (m bits wide)
module Dec(a,b);
    parameter n=2;
    parameter m=4;
    
    input [n-1:0];
    output [m-1:0];

    wire [m-1:0] b = 1<<a;
endmodule

synthesizes to vvv

module dec(in,out);
    input [1:0] in;
    output [3:0] out;
        wire n2,n3;
        etc
endmodule

LOGIC FUNCTION WITH DECODER: PRIME

module prime(in, isprime);
    input   [2:0]   in;
    output          isprime;
    wire    [7:0]   b;

    //compute the output as the OR of the required minterms
    wire            isprime = b[1] | b[2] | b[3] | b[5] | b[7];

    //d is an instance of the decoder
    dec # (3,8) d(in,b);
endmodule

#encoder#

encoder
    inverse of decoder
    converts a one-hot input signal to a binary-encoded output signal
    ie 4->2

large encoder from small encoders
    16->4 using 4->2s
        need an 'any input true' output on first rank of encoders
        first rank encodes low bits, second rank encodes high bits
        repeat as needed
        summary output added, true if any input is 1

#mutliplexer#

multiplexer
    n k-bit inputs
    n-bit one-hot select signal s
    commonly used as data selectors

binary-select multiplexer
    add decoder in path to select signal
    